#!/bin/bash

function usage() {
  cat <<-EOF
NAME

    ${0##*/} - repeat a command n times with the possibility to define and use a counter

SYNOPSYS

    ${0##*/} [OPTIONS] N COMMAND [ARGUMENT]...

DESCRIPTION

    OPTIONS:

        -I replace-str
            Replace occurrences of replace-str in the command-arguments with the counter.

        -h
            Display usage

    N: number of repetition

    COMMAND [ARGUMENT]...: the command and its arguments to call

EXAMPLES

    $ ./repeat 3 ls a 'b c'
    ls: cannot access 'a': No such file or directory
    ls: cannot access 'b c': No such file or directory
    ls: cannot access 'a': No such file or directory
    ls: cannot access 'b c': No such file or directory
    ls: cannot access 'a': No such file or directory
    ls: cannot access 'b c': No such file or directory

    $ ./repeat -I {} 3 ls a 'b c{}'
    ls: cannot access 'a': No such file or directory
    ls: cannot access 'b c0': No such file or directory
    ls: cannot access 'a': No such file or directory
    ls: cannot access 'b c1': No such file or directory
    ls: cannot access 'a': No such file or directory
    ls: cannot access 'b c2': No such file or directory

AUTHOR

    Written by Jean-François Giraud.

COPYRIGHT

    Copyright © 2021 Jean-François Giraud.  License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
    This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.

EOF
  exit 0
}

function error() {
  STATUS="$1"
  MSG="$2"
  cat >&2 <<-EOF
${0##*/}: $MSG
Try \`${0##*/} -h\` for more information.
EOF
  exit 1
}

while getopts ":hI:" o
do
  case "$o" in
    I)
      var="$OPTARG"
      shift 2
      ;;
    h)
      usage
      ;;
    ?)
      error 1 $"invalid option -- '$OPTARG'"
      ;;
  esac
done

if [[ $# -eq 0 ]]; then
  usage
elif [[ $# -lt 2 ]]; then
  error "Not enougth arguments."
fi

n=$1
command=$2

shift 2

i=0
while [[ $i -lt $n ]]; do
  args=()
  for a in "$@"; do
    a=${a//$var/$i}
    args+=("$a")
  done
  ${command} "${args[@]}"
  i=$(( i + 1 ))
done
